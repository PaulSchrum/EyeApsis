<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Calibrate_AcceptProceed" xml:space="preserve">
    <value>Accept Calibration and Begin Testing</value>
    <comment>Accept Calibration and Begin Testing</comment>
  </data>
  <data name="Calibrate_footerExplanation" xml:space="preserve">
    <value>Usually this only has to be done at first use or when switching to a different screen for the vision chart.</value>
    <comment>Usually this only has to be done at first use or when switching to a different screen for the vision chart.</comment>
  </data>
  <data name="Calibrate_Instructions_Imperial" xml:space="preserve">
    <value>Change the Screen Adjustment Factor until the thick vertical line is exactly 3 inches tall.</value>
    <comment>Change the Screen Adjustment Factor until the thick vertical line is exactly 3 inches tall.</comment>
  </data>
  <data name="Calibrate_Instructions_Metric" xml:space="preserve">
    <value>Change the Screen Adjustment Factor until the thick vertical line is exactly 8 centimeters tall.</value>
    <comment>Change the Screen Adjustment Factor until the thick vertical line is exactly 8 centimeters tall.</comment>
  </data>
  <data name="Calibrate_ScreenAdjustmentFactor" xml:space="preserve">
    <value>Screen Adjustment Factor:</value>
    <comment>Screen Adjustment Factor:</comment>
  </data>
  <data name="Calibrate_WindowTitle" xml:space="preserve">
    <value>Calibrate: Tell EyeApsis How to Measure the Screen</value>
    <comment>Calibrate: Tell EyeApsis How to Measure the Screen</comment>
  </data>
  <data name="ExitEyeApsis" xml:space="preserve">
    <value>Exit EyeAspsis</value>
    <comment>Exit EyeAspsis</comment>
  </data>
  <data name="EyeApsis" xml:space="preserve">
    <value>EyeApsis</value>
    <comment>Translate Phonetically</comment>
  </data>
  <data name="Reset_to_1" xml:space="preserve">
    <value>Reset to 1.0</value>
    <comment>Reset to 1.0</comment>
  </data>
  <data name="Splash_Disclaimer" xml:space="preserve">
    <value>EyeApsis is intended only to test vision for the purposes of making prediagnostic assessments of a subject's vision.  Eyeapsis is not certified for actual diagnosis of vision problems or diseases of the eye and should not be used for these purposes.  By clicking the the Agree and Proceed button below, you agree to these terms and you release Terragrammetry, Inc. from any and all liability associated with the use of EyeApsis.  Vision tests made with EyeApsis which indicate possible vision problems should be followed up promptly with a visit to an eye health care professional.</value>
    <comment>EyeApsis is intended only to test vision for the purposes of making prediagnostic assessments of a subject's vision.  Eyeapsis is not certified for actual diagnosis of vision problems or diseases of the eye and should not be used for these purposes.  By clicking the the Agree and Proceed button below, you agree to these terms and you release Terragrammetry, Inc. from any and all liability associated with the use of EyeApsis.  Vision tests made with EyeApsis which indicate possible vision problems should be followed up promptly with a visit to an eye health care professional.</comment>
  </data>
  <data name="Splash_ExitWithoutAgreeing" xml:space="preserve">
    <value>Exit Without Agreeing</value>
    <comment>Exit Without Agreeing</comment>
  </data>
  <data name="Splash_IAgreeProceed" xml:space="preserve">
    <value>I agree to these terms. Proceed.</value>
    <comment>I agree to these terms. Proceed.</comment>
  </data>
  <data name="Splash_Subtitle" xml:space="preserve">
    <value>Prediagnostic Vision Assessment Software</value>
    <comment>Prediagnostic Vision Assessment Software</comment>
  </data>
  <data name="Calibrate_popUseMouseWheel" xml:space="preserve">
    <value>You can use the mouse wheel to change Adjustment Factor values more easily.</value>
    <comment>You can use the mouse wheel to change Adjustment Factor values more easily.</comment>
  </data>
  <data name="Switch_to_Centimeters" xml:space="preserve">
    <value>Switch to Centimeters</value>
    <comment>Switch to Centimeters</comment>
  </data>
  <data name="Switch_to_Inches" xml:space="preserve">
    <value>Switch to Inches</value>
    <comment>Switch to Inches</comment>
  </data>
  <data name="Dash_ColorSensitivity" xml:space="preserve">
    <value>Color
Sensitivity</value>
    <comment>Color
Sensitivity</comment>
  </data>
  <data name="Dash_ContrastSensitivity" xml:space="preserve">
    <value>Contrast
Sensitivity</value>
    <comment>Contrast
Sensitivity</comment>
  </data>
  <data name="Dash_VisualAcuity" xml:space="preserve">
    <value>Visual
Acuity </value>
    <comment>Visual
Acuity</comment>
  </data>
  <data name="DidNotAsk" xml:space="preserve">
    <value>Did not ask</value>
    <comment>Did not ask</comment>
  </data>
  <data name="Dash_AcuityReadoutSystem" xml:space="preserve">
    <value>Acuity Readout System:</value>
    <comment>Acuity Readout System:</comment>
  </data>
  <data name="Dash_CanReadCurrentLine" xml:space="preserve">
    <value>Subject Can Read Current Line</value>
    <comment>Subject Can Read Current Line</comment>
  </data>
  <data name="Dash_LeftEye" xml:space="preserve">
    <value>Left Eye</value>
    <comment>Left Eye</comment>
  </data>
  <data name="Dash_RightEye" xml:space="preserve">
    <value>Right Eye</value>
    <comment>Right Eye</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment>No</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Yes</comment>
  </data>
</root>